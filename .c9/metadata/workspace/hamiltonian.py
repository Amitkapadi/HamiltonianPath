{"changed":true,"filter":false,"title":"hamiltonian.py","tooltip":"/hamiltonian.py","value":"import networkx as nx\n\nG = nx.Graph()\n\ndef getfor(formula):\n    formula = formula[1:-1]\n    clauses = formula.split(\"),(\")\n    tuplas = []\n    for clause in clauses:\n        clause = tuple(map(int,clause.split(\",\")))\n        tuplas.append(clause)\n    return tuplas\n\ndef main(str):\n    g = getfor(str)\n    G.add_edges_from(g)\n    p = hamilton(G)\n    return p\n\ndef hamilton(G):\n    F = [(G,[G.nodes()[0]])]\n    n = G.number_of_nodes()\n    while F:\n        graph,path = F.pop()\n        confs = []\n        for node in graph.neighbors(path[-1]):\n            conf_p = path[:]\n            conf_p.append(node)\n            conf_g = nx.Graph(graph)\n            conf_g.remove_node(path[-1])\n            confs.append((conf_g,conf_p))\n        for g,p in confs:\n            if len(p)==n:\n                return p\n            else:\n                F.append((g,p))\n    return None","undoManager":{"mark":-2,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":36,"column":15},"end":{"row":36,"column":15},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1463195777000}